# **************************************************************************** #
#                                                                              #
#                                                         :::      ::::::::    #
#    notes.txt                                          :+:      :+:    :+:    #
#                                                     +:+ +:+         +:+      #
#    By: dgerard <marvin@42.fr>                     +#+  +:+       +#+         #
#                                                 +#+#+#+#+#+   +#+            #
#    Created: 2017/11/07 18:25:31 by dgerard           #+#    #+#              #
#    Updated: 2017/11/07 18:25:32 by dgerard          ###   ########.fr        #
#                                                                              #
# **************************************************************************** #

peace piece bill evans
1 2
1 3
2 3
int *piece
first two numbers are total dimensions
the rest are ones and zeroes in a map of the piece
OR they are the distance to the next filled space

_______________________QUESTIONS_________________________
✓ How do you place a piece on the board? What data type am I editing, where do I
	put it
✓ The rules for piece placing
~ How will I know when it is my turn and when it is not?

_______________________KNOWN_____________________________
~ Lowercase means that the a piece was just placed at that coordinate
~ 0 is player 1
~ you have to overlap the edge of the new piece with the old block
~ you place a piece by having your program reprint the map!
~ ^^^ WRONG ^^^
~ You actually have to print the intersection coordinate between old new piece,
	in y, x format.

_______________________READER_____________________________
✓ Piece
✓ Player number / piece type
✓ Map
✓ map dimensions

_______________________PROBLEMS___________________________
✓ make sure that you don't read your own output? if that's a possible error
~ and don't bother with the other player's pieces
~ know when it is your turn
~ when the parser reads and saves the piece, make sure it cuts out all the
	unnecessary shit
	>> have it look at rows and columns and remove them if empty
	>>
~ restructure for efficiency. have fewer base fts that only call others consolidate
	to a lower level

_______________________SLIME MOLD ALGORITHM_____________________
~ If there is more space above grow above
~ If there is more space below grow down
	>> test taking the initial enemy position into consideration
	>> Also test a perfect middle start
~ one level = placing two in branch direction, then two up no matter the size or shape
	>> edit the amount of pieces to go in each direction depending on results
~ add together the last two numbers in the sequence to get the right number of
	branches (fibonacci)
~ have a linked list "node" at each branch
~ depending on the enemy's closeness to each node, invest in those areas first.
~ traverse through nodes and check enemy distance to all
~ when a branch gap is "closed off" against a wall, fill in at the end
~ when a branch gap has the enemy in it, work on closing it off
~ keep the nodes for reference
~ always branch on the side that is closet to the enemy

___________________HEAT MAP ALGORITHM_________________________
~ for each edge coordinate of mine, calculate how far it is to the next enemy piece
~ attach a number to each edge coordinate. the number is how many steps you must
	move in a circle to reach the next enemy Piece
~ place piece wherever the number is lowest. If there are many of the same
	numbers, then favor the most central. If no dead center, then center left
~ calculate distance to next enemy piece in lateral and diagonal directions
~ put those numbers into the risk int array
	>> 0 - straight up (north)
	>> 1 - NE
	>> 2 - E
	>> 3 - SE
	>> 4 - S
	>> 5 - SW
	>> 6 - W
	>> 7 - NW
~ improvement if necessary: make the numbers change based on adjacent numbers
~ piece fits
	>> send the anchor coordinates to the check piece ft (a section on the edge
		of my territory)
	>> increment the weapon until the first 1 of the weapon
	>> check all other weapon 1s for fit in check_shape
		>>iterate though all other ones in the weapon (3rd number, 1st row)
		>> check all for a fit
		>> add the heat map numbers of each space positively checked to the
			anchor score
		>> if no match on any of the other 1s, then return 0
	>> then continue in the weapon_fits loop fir the next

___________________READING LOOP STRUCTURE______________________
~ if you just initialized duel->warrior to p1, then initialize turn to true
~ if arena uninitialized an turn is true
	>> learn weapon
	>> observe arena
	>> watch enemy
~ if arena uninitialized an turn is false
	>> observe arena
	>> wait cycle
~ if arena initialized an turn is true
	>>learn weapon
	>> watch enemy
~ if arena initialized and turn is false
	>> wait cycle
~ wait cycle
	>>length of map
	>>plus length of Piece // but if you do this then you will have to look at pice size always if you do this
	>>plus 3 lines

___________________________MAP KEY___________________________
~ open spaces are positive numbers, calculated reward based on algorithm
~ taken by me already is -42 (adjust this number, may too heavily favor outward growth)
~ taken by the opponent is -2
~ recently taken by opponent is -1
~ calibration value before reward calculation is 0

//	CURRENT TASKS
// check the heatmap for abnormalities. negative numbers where there shouldn't be any.
// figure out why it's crashing occasionally.
// remove the -2 -1 differentiation if it's not useful.
// tweak favoring enemy over getting away from yourself, to try to beat carli
